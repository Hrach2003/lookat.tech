generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  deletedAt       DateTime?    @db.Timestamp(6)
  name            String       @db.VarChar
  email           String       @unique @db.VarChar
  password        String       @db.VarChar
  avatar          String?      @db.VarChar
  role            UserRoleEnum @default(USER)
  friends         User[]       @relation("friends")
  friendsRelation User[]       @relation("friends")

  posts    Post[]
  comments Comment[]
  replies Reply[]
  
  @@map("user")
}

enum UserRoleEnum {
  ADMIN
  USER
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  title   String @db.VarChar
  content String @db.VarChar

  comments Comment[]

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  @@map("post")
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  message String @db.VarChar(200)

  commenter   User @relation(fields: [commenterId], references: [id])
  commenterId Int

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@map("reply")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)

  message String @db.VarChar(200)

  replies Reply[]

  commenter   User @relation(fields: [commenterId], references: [id])
  commenterId Int

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@map("comment")
}
